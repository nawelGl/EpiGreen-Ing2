{"ast":null,"code":"var _jsxFileName = \"/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/api/Geoapify.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport axios from \"axios\";\n\n// Besoin de changer les waypoints en adresses\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const getDistanceBetweenTwoPlaces = async () => {\n  const myAPIKey = \"c81205a4fb97473b93dd0df61a9838c6\";\n  const fromWaypoint = [38.937165, -77.04559];\n  const toWaypoint = [39.881152, -76.990693];\n  const url = `https://api.geoapify.com/v1/routing?waypoints=${fromWaypoint.join(\",\")}|${toWaypoint.join(\",\")}&mode=drive&details=instruction_details&apiKey=${myAPIKey}`;\n  console.log(\"HERE\");\n  const response = await axios.get(url);\n  console.log(response.data);\n  return response.data;\n};\n\n// Composant React pour tester / afficher les résultats\nconst Geoapify = () => {\n  _s();\n  const [routeData, setRouteData] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  React.useEffect(() => {\n    getDistanceBetweenTwoPlaces().then(data => setRouteData(data)).catch(error => setError(error.message));\n  }, []);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 16\n    }, this);\n  }\n  if (!routeData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Route Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(routeData, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(Geoapify, \"wmzPiHBgjx5uMOu75bi7YUWIb1w=\");\n_c = Geoapify;\nexport default Geoapify;\nvar _c;\n$RefreshReg$(_c, \"Geoapify\");","map":{"version":3,"names":["React","axios","jsxDEV","_jsxDEV","getDistanceBetweenTwoPlaces","myAPIKey","fromWaypoint","toWaypoint","url","join","console","log","response","get","data","Geoapify","_s","routeData","setRouteData","useState","error","setError","useEffect","then","catch","message","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/api/Geoapify.js"],"sourcesContent":["import React from 'react';\nimport axios from \"axios\";\n\n// Besoin de changer les waypoints en adresses\nexport const getDistanceBetweenTwoPlaces = async () => {\n    const myAPIKey = \"c81205a4fb97473b93dd0df61a9838c6\";\n    const fromWaypoint = [38.937165, -77.04559];\n    const toWaypoint = [39.881152, -76.990693];\n    const url = `https://api.geoapify.com/v1/routing?waypoints=${fromWaypoint.join(\",\")}|${toWaypoint.join(\",\")}&mode=drive&details=instruction_details&apiKey=${myAPIKey}`;\n\n    console.log(\"HERE\");\n\n    const response = await axios.get(url);\n    console.log(response.data);\n    return response.data;\n};\n\n// Composant React pour tester / afficher les résultats\n    const Geoapify = () => {\n    const [routeData, setRouteData] = React.useState(null);\n    const [error, setError] = React.useState(null);\n\n    React.useEffect(() => {\n        getDistanceBetweenTwoPlaces()\n            .then((data) => setRouteData(data))\n            .catch((error) => setError(error.message));\n    }, []);\n\n    if (error) {\n        return <div>Error: {error}</div>;\n    }\n\n    if (!routeData) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div>\n            <h1>Route Information</h1>\n            <pre>{JSON.stringify(routeData, null, 2)}</pre>\n        </div>\n    );\n};\n\nexport default Geoapify;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,2BAA2B,GAAG,MAAAA,CAAA,KAAY;EACnD,MAAMC,QAAQ,GAAG,kCAAkC;EACnD,MAAMC,YAAY,GAAG,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC;EAC3C,MAAMC,UAAU,GAAG,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC;EAC1C,MAAMC,GAAG,GAAI,iDAAgDF,YAAY,CAACG,IAAI,CAAC,GAAG,CAAE,IAAGF,UAAU,CAACE,IAAI,CAAC,GAAG,CAAE,kDAAiDJ,QAAS,EAAC;EAEvKK,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;EAEnB,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAACL,GAAG,CAAC;EACrCE,OAAO,CAACC,GAAG,CAACC,QAAQ,CAACE,IAAI,CAAC;EAC1B,OAAOF,QAAQ,CAACE,IAAI;AACxB,CAAC;;AAED;AACI,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGlB,KAAK,CAACmB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,KAAK,CAACmB,QAAQ,CAAC,IAAI,CAAC;EAE9CnB,KAAK,CAACsB,SAAS,CAAC,MAAM;IAClBlB,2BAA2B,CAAC,CAAC,CACxBmB,IAAI,CAAET,IAAI,IAAKI,YAAY,CAACJ,IAAI,CAAC,CAAC,CAClCU,KAAK,CAAEJ,KAAK,IAAKC,QAAQ,CAACD,KAAK,CAACK,OAAO,CAAC,CAAC;EAClD,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIL,KAAK,EAAE;IACP,oBAAOjB,OAAA;MAAAuB,QAAA,GAAK,SAAO,EAACN,KAAK;IAAA;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EACpC;EAEA,IAAI,CAACb,SAAS,EAAE;IACZ,oBAAOd,OAAA;MAAAuB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChC;EAEA,oBACI3B,OAAA;IAAAuB,QAAA,gBACIvB,OAAA;MAAAuB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1B3B,OAAA;MAAAuB,QAAA,EAAMK,IAAI,CAACC,SAAS,CAACf,SAAS,EAAE,IAAI,EAAE,CAAC;IAAC;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEd,CAAC;AAACd,EAAA,CAxBQD,QAAQ;AAAAkB,EAAA,GAARlB,QAAQ;AA0BlB,eAAeA,QAAQ;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}