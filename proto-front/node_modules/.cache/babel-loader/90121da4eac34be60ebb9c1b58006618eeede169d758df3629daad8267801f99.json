{"ast":null,"code":"var _jsxFileName = \"/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Livraison.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getResultFromGeocodingApi, getResultFromRoutingApi } from \"../api/Geoapify\";\nimport { getDeliveryById } from \"./Delivery\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Livraison() {\n  _s();\n  // Choose a delivery to calculate its carbon footprint\n  const [deliveryId, setDeliveryId] = useState(\"\");\n  const [delivery, setDelivery] = useState(null);\n\n  // To fetch those objects' data from delivery\n  const [account, setAccount] = useState(null);\n  const [customer, setCustomer] = useState(null);\n  const [entrepot, setEntrepot] = useState(null);\n  const [transportation, setTransportation] = useState(null);\n  const [distance, setDistance] = useState(null);\n  const [customerCoordinates, setCustomerCoordinates] = useState({\n    latitude: null,\n    longitude: null\n  });\n  const [entrepotCoordinates, setEntrepotCoordinates] = useState({\n    latitude: null,\n    longitude: null\n  });\n  const [cO2quantity, setCO2quantity] = useState(null);\n\n  // ===== Fetching objects' data from delivery =====\n  // Function to fetch delivery data\n  const fetchDeliveryData = async () => {\n    try {\n      const deliveryData = await getDeliveryById(deliveryId);\n      setDelivery(deliveryData);\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération des données de livraison : \", error);\n    }\n  };\n  useEffect(() => {\n    if (delivery) {\n      var _delivery$account;\n      setAccount(delivery.account);\n      setCustomer((_delivery$account = delivery.account) === null || _delivery$account === void 0 ? void 0 : _delivery$account.customer);\n      setEntrepot(delivery.entrepot);\n      setTransportation(delivery.transportation);\n    }\n  }, [delivery]);\n\n  // ===== Function to call the geocoding API for the customer =====\n  const fetchCustomerCoordinates = async () => {\n    if (customer !== null && customer !== void 0 && customer.address) {\n      try {\n        var _response$features$, _response$features$2;\n        const response = await getResultFromGeocodingApi(customer.address);\n        const lat = (_response$features$ = response.features[0]) === null || _response$features$ === void 0 ? void 0 : _response$features$.properties.lat;\n        const lon = (_response$features$2 = response.features[0]) === null || _response$features$2 === void 0 ? void 0 : _response$features$2.properties.lon;\n        if (lat !== customerCoordinates.latitude || lon !== customerCoordinates.longitude) {\n          setCustomerCoordinates({\n            latitude: lat,\n            longitude: lon\n          });\n        }\n      } catch (error) {\n        console.error(\"Erreur lors de l'appel à l'API de géocodage pour le client : \", error);\n      }\n    }\n  };\n\n  // ===== Function to call the geocoding API for the entrepot =====\n  const fetchEntrepotCoordinates = async () => {\n    if (entrepot !== null && entrepot !== void 0 && entrepot.address) {\n      try {\n        var _response$features$3, _response$features$4;\n        const response = await getResultFromGeocodingApi(entrepot.address);\n        const lat = (_response$features$3 = response.features[0]) === null || _response$features$3 === void 0 ? void 0 : _response$features$3.properties.lat;\n        const lon = (_response$features$4 = response.features[0]) === null || _response$features$4 === void 0 ? void 0 : _response$features$4.properties.lon;\n        if (lat !== entrepotCoordinates.latitude || lon !== entrepotCoordinates.longitude) {\n          setEntrepotCoordinates({\n            latitude: lat,\n            longitude: lon\n          });\n        }\n      } catch (error) {\n        console.error(\"Erreur lors de l'appel à l'API de géocodage pour l'entrepot : \", error);\n      }\n    }\n  };\n\n  // ===== Function to call the routage API =====\n  const callRoutingApi = async () => {\n    console.log(\"DANS CALL ROUTING API\");\n    try {\n      var _response$features$5;\n      // Convertir les objets en tableaux [latitude, longitude]\n      const fromWaypoint = [customerCoordinates.latitude, customerCoordinates.longitude];\n      const toWaypoint = [entrepotCoordinates.latitude, entrepotCoordinates.longitude];\n      console.log(\"fromWayPoint : \" + fromWaypoint);\n      console.log(\"toWayPoint : \" + toWaypoint);\n\n      // Appeler l'API avec ces tableaux\n      const response = await getResultFromRoutingApi(fromWaypoint, toWaypoint);\n      const distance = ((_response$features$5 = response.features[0]) === null || _response$features$5 === void 0 ? void 0 : _response$features$5.properties.distance) / 1000;\n      setDistance(distance);\n    } catch (error) {\n      console.error(\"Erreur lors de l'appel à l'API de routage : \", error);\n    }\n  };\n  const calculateCo2Quantity = async () => {\n    setCO2quantity(distance * transportation.kgCo2);\n  };\n\n  // After getting customer and entrepot's data, fetching their coordonates\n  useEffect(() => {\n    if (customer) {\n      fetchCustomerCoordinates();\n    }\n  }, [customer]);\n  useEffect(() => {\n    if (entrepot) {\n      fetchEntrepotCoordinates();\n    }\n  }, [entrepot]);\n  useEffect(() => {\n    if (customerCoordinates.latitude && customerCoordinates.longitude && entrepotCoordinates.latitude && entrepotCoordinates.longitude) {\n      callRoutingApi();\n    } else {\n      console.error(\"Coordonnées manquantes ou invalides :\", {\n        customerCoordinates,\n        entrepotCoordinates\n      });\n    }\n  }, [customerCoordinates, entrepotCoordinates]);\n  useEffect(() => {\n    if (distance) {\n      calculateCo2Quantity();\n    }\n  }, [distance]);\n\n  // Display\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Choisissez votre mode de livraison : \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 59\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Livraison \\xE0 domicile :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Choix du num\\xE9ro de livraison :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Livraison ID : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: deliveryId,\n        onChange: e => setDeliveryId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchDeliveryData,\n      children: \"R\\xE9cup\\xE9rer donn\\xE9es de la livraison depuis la BD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), delivery && account && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"M\\xE9tadonn\\xE9es (pour la d\\xE9mo) : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Client :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 49\n        }, this), \"Latitude client : \", customerCoordinates.latitude, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 102\n        }, this), \"Longitude client : \", customerCoordinates.longitude, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 75\n        }, this), \"Adresse client : \", customer.address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Entrepot :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 51\n        }, this), \"Latitude entrepot : \", entrepotCoordinates.latitude, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 106\n        }, this), \"Longitude entrepot : \", entrepotCoordinates.longitude, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 77\n        }, this), \"Adresse entrepot : \", entrepot.address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }, this), distance && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Distance parcourue lors de la livraison :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 24\n        }, this), \" \", distance, \" km.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 97\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Co2 engendr\\xE9 par cette livraison :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 24\n        }, this), \" \", cO2quantity, \" kgCo2.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 96\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n}\n_s(Livraison, \"lwisy/NNJ5ca2CT2iHFAjNH7eig=\");\n_c = Livraison;\nvar _c;\n$RefreshReg$(_c, \"Livraison\");","map":{"version":3,"names":["React","useState","useEffect","getResultFromGeocodingApi","getResultFromRoutingApi","getDeliveryById","jsxDEV","_jsxDEV","Livraison","_s","deliveryId","setDeliveryId","delivery","setDelivery","account","setAccount","customer","setCustomer","entrepot","setEntrepot","transportation","setTransportation","distance","setDistance","customerCoordinates","setCustomerCoordinates","latitude","longitude","entrepotCoordinates","setEntrepotCoordinates","cO2quantity","setCO2quantity","fetchDeliveryData","deliveryData","error","console","_delivery$account","fetchCustomerCoordinates","address","_response$features$","_response$features$2","response","lat","features","properties","lon","fetchEntrepotCoordinates","_response$features$3","_response$features$4","callRoutingApi","log","_response$features$5","fromWaypoint","toWaypoint","calculateCo2Quantity","kgCo2","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Livraison.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getResultFromGeocodingApi, getResultFromRoutingApi } from \"../api/Geoapify\";\nimport { getDeliveryById } from \"./Delivery\";\n\nexport default function Livraison() {\n    // Choose a delivery to calculate its carbon footprint\n    const [deliveryId, setDeliveryId] = useState(\"\");\n    const [delivery, setDelivery] = useState(null);\n\n    // To fetch those objects' data from delivery\n    const [account, setAccount] = useState(null);\n    const [customer, setCustomer] = useState(null);\n    const [entrepot, setEntrepot] = useState(null);\n    const [transportation, setTransportation] = useState(null);\n    const [distance, setDistance] = useState(null);\n    const [customerCoordinates, setCustomerCoordinates] = useState({\n        latitude: null,\n        longitude: null,\n    });\n    const [entrepotCoordinates, setEntrepotCoordinates] = useState({\n        latitude: null,\n        longitude: null,\n    });\n    const [cO2quantity, setCO2quantity] = useState(null);\n\n\n    // ===== Fetching objects' data from delivery =====\n    // Function to fetch delivery data\n    const fetchDeliveryData = async () => {\n        try {\n            const deliveryData = await getDeliveryById(deliveryId);\n            setDelivery(deliveryData);\n        } catch (error) {\n            console.error(\"Erreur lors de la récupération des données de livraison : \", error);\n        }\n    };\n\n    useEffect(() => {\n        if (delivery) {\n            setAccount(delivery.account);\n            setCustomer(delivery.account?.customer);\n            setEntrepot(delivery.entrepot);\n            setTransportation(delivery.transportation);\n        }\n    }, [delivery]);\n\n    // ===== Function to call the geocoding API for the customer =====\n    const fetchCustomerCoordinates = async () => {\n        if (customer?.address) {\n            try {\n                const response = await getResultFromGeocodingApi(customer.address);\n                const lat = response.features[0]?.properties.lat;\n                const lon = response.features[0]?.properties.lon;\n                if (\n                    lat !== customerCoordinates.latitude ||\n                    lon !== customerCoordinates.longitude\n                ) {\n                    setCustomerCoordinates({ latitude: lat, longitude: lon });\n                }\n            } catch (error) {\n                console.error(\"Erreur lors de l'appel à l'API de géocodage pour le client : \", error);\n            }\n        }\n    };\n\n    // ===== Function to call the geocoding API for the entrepot =====\n    const fetchEntrepotCoordinates = async () => {\n        if (entrepot?.address) {\n            try {\n                const response = await getResultFromGeocodingApi(entrepot.address);\n                const lat = response.features[0]?.properties.lat;\n                const lon = response.features[0]?.properties.lon;\n                if (\n                    lat !== entrepotCoordinates.latitude ||\n                    lon !== entrepotCoordinates.longitude\n                ) {\n                    setEntrepotCoordinates({ latitude: lat, longitude: lon });\n                }\n            } catch (error) {\n                console.error(\"Erreur lors de l'appel à l'API de géocodage pour l'entrepot : \", error);\n            }\n        }\n    };\n\n    // ===== Function to call the routage API =====\n    const callRoutingApi = async () => {\n        console.log(\"DANS CALL ROUTING API\");\n        try {\n            // Convertir les objets en tableaux [latitude, longitude]\n            const fromWaypoint = [customerCoordinates.latitude, customerCoordinates.longitude];\n            const toWaypoint = [entrepotCoordinates.latitude, entrepotCoordinates.longitude];\n\n            console.log(\"fromWayPoint : \" + fromWaypoint);\n            console.log(\"toWayPoint : \" + toWaypoint);\n\n            // Appeler l'API avec ces tableaux\n            const response = await getResultFromRoutingApi(fromWaypoint, toWaypoint);\n            const distance = response.features[0]?.properties.distance / 1000;\n            setDistance(distance);\n        } catch (error) {\n            console.error(\"Erreur lors de l'appel à l'API de routage : \", error);\n        }\n    };\n\n\n    const calculateCo2Quantity = async () => {\n        setCO2quantity(distance * transportation.kgCo2);\n    };\n\n    // After getting customer and entrepot's data, fetching their coordonates\n    useEffect(() => {\n        if (customer) {\n            fetchCustomerCoordinates();\n        }\n    }, [customer]);\n\n    useEffect(() => {\n        if (entrepot) {\n            fetchEntrepotCoordinates();\n        }\n    }, [entrepot]);\n\n\n    useEffect(() => {\n        if (\n            customerCoordinates.latitude && customerCoordinates.longitude &&\n            entrepotCoordinates.latitude && entrepotCoordinates.longitude\n        ) {\n            callRoutingApi();\n        } else {\n            console.error(\"Coordonnées manquantes ou invalides :\", { customerCoordinates, entrepotCoordinates });\n        }\n    }, [customerCoordinates, entrepotCoordinates]);\n\n    useEffect(() => {\n        if (distance) {\n            calculateCo2Quantity();\n        }\n    }, [distance]);\n\n\n    // Display\n    return (\n        <div className=\"container\">\n            <h2>Choisissez votre mode de livraison : </h2><br />\n            <h4>Livraison à domicile :</h4>\n            <h5>Choix du numéro de livraison :</h5>\n            <div>\n                <label>Livraison ID : </label>\n                <input\n                    type=\"number\"\n                    value={deliveryId}\n                    onChange={(e) => setDeliveryId(e.target.value)}\n                />\n            </div>\n            <br />\n            <button onClick={fetchDeliveryData}>Récupérer données de la livraison depuis la BD</button>\n            {delivery && account && (\n                <div>\n                    <br/>\n                    <strong>Métadonnées (pour la démo) : </strong>\n                    <br/><br/>\n                    <p><strong>Client :</strong><br/>Latitude client : {customerCoordinates.latitude}<br/>\n                        Longitude client : {customerCoordinates.longitude}<br/>\n                        Adresse client : {customer.address}</p>\n                    <p><strong>Entrepot :</strong><br/>Latitude entrepot : {entrepotCoordinates.latitude}<br/>\n                        Longitude entrepot : {entrepotCoordinates.longitude}<br/>\n                        Adresse entrepot : {entrepot.address}</p>\n                </div>\n            )}\n            {distance && (\n                <div>\n                    <br/>\n                    <p><strong>Distance parcourue lors de la livraison :</strong> {distance} km.<br/></p>\n                    <p><strong>Co2 engendré par cette livraison :</strong> {cO2quantity} kgCo2.<br/></p>\n                </div>\n            )}\n        </div>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}