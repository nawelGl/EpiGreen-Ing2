[{"/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/index.js":"1","/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Router.js":"2","/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Store.js":"3","/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Customer.js":"4","/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Navbar.js":"5","/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/NotFound.js":"6","/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/App.js":"7","/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/DemoLivraison.js":"8","/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Sample.js":"9","/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/constants/back.js":"10","/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Logs.js":"11","/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/api/Geoapify.js":"12","/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Entrepot.js":"13"},{"size":346,"mtime":1737493932717,"results":"14","hashOfConfig":"15"},{"size":963,"mtime":1737568176239,"results":"16","hashOfConfig":"15"},{"size":2024,"mtime":1737560466900,"results":"17","hashOfConfig":"15"},{"size":2217,"mtime":1737560466898,"results":"18","hashOfConfig":"15"},{"size":860,"mtime":1737568093824,"results":"19","hashOfConfig":"15"},{"size":250,"mtime":1737493932714,"results":"20","hashOfConfig":"15"},{"size":232,"mtime":1737493932713,"results":"21","hashOfConfig":"15"},{"size":7476,"mtime":1737565748380,"results":"22","hashOfConfig":"15"},{"size":6051,"mtime":1737560466900,"results":"23","hashOfConfig":"15"},{"size":713,"mtime":1737568021813,"results":"24","hashOfConfig":"15"},{"size":1167,"mtime":1737560466899,"results":"25","hashOfConfig":"15"},{"size":954,"mtime":1737560466898,"results":"26","hashOfConfig":"15"},{"size":389,"mtime":1737563632929,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"et0rp5",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/index.js",[],[],"/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Router.js",[],[],"/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Store.js",[],[],"/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Customer.js",[],[],"/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Navbar.js",[],[],"/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/NotFound.js",[],[],"/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/App.js",[],[],"/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/DemoLivraison.js",["69","70"],[],"import React, { useState} from 'react';\r\nimport { getResultFromRoutingApi, getResultFromGeocodingApi } from \"../api/Geoapify\";\r\nimport { getCustomerById } from \"../components/Customer\";\r\nimport { getEntrepotById } from \"../components/Entrepot\";\r\n\r\nconst DemoLivraison = () => {\r\n    const [distance, setDistance] = useState(null);\r\n    const [customerId, setCustomerId] = useState(\"\");\r\n    const [entrepotId, setEntrepotId] = useState(\"\");\r\n    const [routeData, setRouteData] = useState(null);\r\n    const [customer, setCustomer] = useState(null);\r\n    const [entrepot, setEntrepot] = useState(null);\r\n    const [customerCoordinates, setCustomerCoordinates] = useState({\r\n        latitude: null,\r\n        longitude: null\r\n    });\r\n    const [entrepotCoordinates, setEntrepotCoordinates] = useState({\r\n        latitude: null,\r\n        longitude: null\r\n    });\r\n\r\n\r\n    // Function to fetch customer data\r\n    const fetchCustomerData = async () => {\r\n        if (customerId) {\r\n            const customerData = await getCustomerById(customerId);\r\n            setCustomer(customerData);\r\n        }\r\n    };\r\n\r\n\r\n    // Function to fetch entrepot data\r\n    const fetchEntrepotData = async () => {\r\n        if (entrepotId) {\r\n            const entrepotData = await getEntrepotById(entrepotId);\r\n            console.log(\"Données entrepot : \" + entrepotData);\r\n            setEntrepot(entrepotData);\r\n        }\r\n    };\r\n\r\n\r\n    // Function to call the geocoding API for the customer\r\n    const fetchCustomerCoordinates = async () => {\r\n        if (customer?.address) {\r\n            try {\r\n                const response = await getResultFromGeocodingApi(customer.address);\r\n                const lat = response.features[0]?.properties.lat;\r\n                const lon = response.features[0]?.properties.lon;\r\n                if (\r\n                    lat !== customerCoordinates.latitude ||\r\n                    lon !== customerCoordinates.longitude\r\n                ) {\r\n                    setCustomerCoordinates({ latitude: lat, longitude: lon });\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Erreur lors de l'appel à l'API de géocodage pour le client : \", error);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    // Function to call the geocoding API for the entrepot\r\n    const fetchEntrepotCoordinates = async () => {\r\n        if (entrepot?.address) {\r\n            try {\r\n                const response = await getResultFromGeocodingApi(entrepot.address);\r\n                const lat = response.features[0]?.properties.lat;\r\n                const lon = response.features[0]?.properties.lon;\r\n                if (\r\n                    lat !== entrepotCoordinates.latitude ||\r\n                    lon !== entrepotCoordinates.longitude\r\n                ) {\r\n                    setEntrepotCoordinates({ latitude: lat, longitude: lon });\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Erreur lors de l'appel à l'API de géocodage pour l'entrepot : \", error);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    // Function to call the routage API\r\n    const callRoutingApi = async () => {\r\n        try {\r\n            // Convertir les objets en tableaux [latitude, longitude]\r\n            const fromWaypoint = [customerCoordinates.latitude, customerCoordinates.longitude];\r\n            const toWaypoint = [entrepotCoordinates.latitude, entrepotCoordinates.longitude];\r\n\r\n            console.log(\"fromWayPoint : \" + fromWaypoint);\r\n            console.log(\"toWayPoint : \" + toWaypoint);\r\n\r\n            // Appeler l'API avec ces tableaux\r\n            const response = await getResultFromRoutingApi(fromWaypoint, toWaypoint);\r\n            const distance = response.features[0]?.properties.distance / 1000;\r\n            setDistance(distance);\r\n            setRouteData(response);\r\n        } catch (error) {\r\n            console.error(\"Erreur lors de l'appel à l'API de routage : \", error);\r\n        }\r\n    };\r\n\r\n\r\n    const calculQuantiteCo2 = async () => {\r\n        //TODO : ajouter table livraison pour pouvoir calculer emissions CO2 (calculer distace avec les attributs de la livraison aussi)\r\n        //const quantiteCO2 = distance * livraison.transport.kgCo2;\r\n    };\r\n\r\n\r\n    // Display\r\n    return (\r\n        <div className=\"container\">\r\n            <h2>Démo Livraison</h2><br/>\r\n            <h3>Client :</h3>\r\n            <div>\r\n                <label>Client ID : </label>\r\n                <input\r\n                    type=\"number\"\r\n                    value={customerId}\r\n                    onChange={(e) => setCustomerId(e.target.value)}\r\n                />\r\n            </div>\r\n            <br/>\r\n            <button onClick={fetchCustomerData}>Récupérer données du client</button>\r\n            <br/>\r\n\r\n            {customer && (\r\n                <>\r\n                    <div>\r\n                        <br/>\r\n                        <p><strong>Nom : </strong>{customer.firstname} {customer.lastname}</p>\r\n                        <p><strong>Adresse : </strong>{customer.address}</p>\r\n                    </div>\r\n                    <br/>\r\n                    <button onClick={fetchCustomerCoordinates}>\r\n                        Récupérer coordonnées client\r\n                    </button>\r\n                    {customerCoordinates.latitude && (\r\n                        <div>\r\n                            <p><strong>Latitude : </strong>{customerCoordinates.latitude}</p>\r\n                            <p><strong>Longitude : </strong>{customerCoordinates.longitude}</p>\r\n                        </div>\r\n                    )}\r\n                </>\r\n            )}\r\n\r\n            <br/>\r\n            <br/>\r\n\r\n            <h3>Entrepot :</h3>\r\n            <div>\r\n                <label>Entrepot ID : </label>\r\n                <input\r\n                    type=\"number\"\r\n                    value={entrepotId}\r\n                    onChange={(e) => setEntrepotId(e.target.value)}\r\n                />\r\n            </div>\r\n            <br/>\r\n            <button onClick={fetchEntrepotData}>Récupérer données de l'entrepot</button>\r\n            {entrepot && (\r\n                <>\r\n                    <div>\r\n                        <br/>\r\n                        <p><strong>Adresse : </strong>{entrepot.address}</p>\r\n                    </div>\r\n                    <br/>\r\n                    <button onClick={fetchEntrepotCoordinates}>\r\n                        Récupérer coordonnées magasin\r\n                    </button>\r\n                    {entrepotCoordinates.latitude && (\r\n                        <div>\r\n                            <p><strong>Latitude : </strong>{entrepotCoordinates.latitude}</p>\r\n                            <p><strong>Longitude : </strong>{entrepotCoordinates.longitude}</p>\r\n                        </div>\r\n                    )}\r\n                </>\r\n            )}\r\n            {customerCoordinates && entrepotCoordinates && (\r\n                <>\r\n                    <button onClick={callRoutingApi}>\r\n                        Récupérer distance client - entrepot\r\n                    </button>\r\n                    {distance && (\r\n                        <>\r\n                            <div>\r\n                                <p><strong>Distance : </strong>{distance}<strong> km.</strong></p>\r\n                            </div>\r\n\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DemoLivraison;\r\n","/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Sample.js",[],[],"/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/constants/back.js",[],[],"/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Logs.js",[],[],"/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/api/Geoapify.js",["71"],[],"import axios from \"axios\";\r\n\r\nexport const getResultFromRoutingApi = async (fromWaypoint, toWaypoint) => {\r\n    const myAPIKey = \"c81205a4fb97473b93dd0df61a9838c6\";\r\n    const url = `https://api.geoapify.com/v1/routing?waypoints=${fromWaypoint.join(\",\")}|${toWaypoint.join(\",\")}&mode=drive&details=instruction_details&apiKey=${myAPIKey}`;\r\n    const data = \"Bonjour depuis Page1!\";\r\n    const response = await axios.get(url);\r\n    console.log(response.data);\r\n    return response.data;\r\n};\r\n\r\nexport const getResultFromGeocodingApi = async (address) => {\r\n    const myAPIKey = \"c81205a4fb97473b93dd0df61a9838c6\";\r\n    const encodedAddress = encodeURIComponent(address);\r\n    const url = `https://api.geoapify.com/v1/geocode/search?text=${encodedAddress}&apiKey=${myAPIKey}`;\r\n    const response = await axios.get(url);\r\n    console.log(response.data);\r\n    return response.data;\r\n};\r\n\r\n    const Geoapify = () => {\r\n\r\n    };\r\n\r\nexport default Geoapify;\r\n","/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Entrepot.js",[],[],{"ruleId":"72","severity":1,"message":"73","line":10,"column":12,"nodeType":"74","messageId":"75","endLine":10,"endColumn":21},{"ruleId":"72","severity":1,"message":"76","line":103,"column":11,"nodeType":"74","messageId":"75","endLine":103,"endColumn":28},{"ruleId":"72","severity":1,"message":"77","line":6,"column":11,"nodeType":"74","messageId":"75","endLine":6,"endColumn":15},"no-unused-vars","'routeData' is assigned a value but never used.","Identifier","unusedVar","'calculQuantiteCo2' is assigned a value but never used.","'data' is assigned a value but never used."]