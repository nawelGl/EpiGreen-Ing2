{"ast":null,"code":"var _jsxFileName = \"/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Livraison.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { getCustomerById } from \"./Customer\";\nimport { getEntrepotById } from \"./Entrepot\";\nimport { getResultFromGeocodingApi, getResultFromRoutingApi } from \"../api/Geoapify\";\nimport { getDeliveryById } from \"./Delivery\";\nimport { getAccountById } from \"./Account\";\nimport { getTransportationById } from \"./Transportation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function DemoLivraison() {\n  _s();\n  //Choose a delivery to calculate its carbon footprint\n  const [deliveryId, setDeliveryId] = useState(\"\");\n  const [delivery, setDelivery] = useState(null);\n\n  //IDs of delivery's foreign keys\n  const [accountId, setAccountId] = useState(\"\");\n  const [customerId, setCustomerId] = useState(\"\");\n  const [transportationId, setTransportationId] = useState(\"\");\n  const [entrepotId, setEntrepotId] = useState(\"\");\n\n  //To fetch those objects' data from delivery\n  const [account, setAccount] = useState(null);\n  const [customer, setCustomer] = useState(null);\n  const [entrepot, setEntrepot] = useState(null);\n  const [transportation, setTransportation] = useState(null);\n  const [distance, setDistance] = useState(null);\n  const [customerCoordinatesDetails, setCustomerCoordinatesDetails] = useState(\"\");\n  const [entrepotCoordinatesDetails, setEntrepotCoordinatesDetails] = useState(\"\");\n  const [routeData, setRouteData] = useState(null);\n  const [customerCoordinates, setCustomerCoordinates] = useState({\n    latitude: null,\n    longitude: null\n  });\n  const [entrepotCoordinates, setEntrepotCoordinates] = useState({\n    latitude: null,\n    longitude: null\n  });\n  const [completeResponseCustomer, setCompleteResponseCustomer] = useState(false);\n  const [completeResponseEntrepot, setCompleteResponseEntrepot] = useState(false);\n\n  // ===== Fetching objects' data =====\n  // Function to fetch delivery data\n  const fetchDeliveryData = async () => {\n    if (deliveryId) {\n      const deliveryData = await getDeliveryById(deliveryId);\n      setDelivery(deliveryData);\n    }\n  };\n\n  // Function to fetch account data\n  const fetchAccountData = async () => {\n    if (accountId) {\n      const accountData = await getAccountById(accountId);\n      setAccount(accountData);\n    }\n  };\n\n  // Function to fetch customer data\n  const fetchCustomerData = async () => {\n    if (customerId) {\n      const customerData = await getCustomerById(customerId);\n      setCustomer(customerData);\n    }\n  };\n\n  // Function to fetch entrepot data\n  const fetchEntrepotData = async () => {\n    if (entrepotId) {\n      const entrepotData = await getEntrepotById(entrepotId);\n      setEntrepot(entrepotData);\n    }\n  };\n\n  // Function to fetch transportation data\n  const fetchTransportationData = async () => {\n    if (transportationId) {\n      const transportationData = await getTransportationById(transportationId);\n      setTransportation(transportationData);\n    }\n  };\n\n  // Function to call the geocoding API for the customer\n  const fetchCustomerCoordinates = async () => {\n    if (customer !== null && customer !== void 0 && customer.address) {\n      try {\n        var _response$features$, _response$features$2;\n        const response = await getResultFromGeocodingApi(customer.address);\n        const stringifiedResponse = JSON.stringify(response);\n        setCustomerCoordinatesDetails(stringifiedResponse);\n        const lat = (_response$features$ = response.features[0]) === null || _response$features$ === void 0 ? void 0 : _response$features$.properties.lat;\n        const lon = (_response$features$2 = response.features[0]) === null || _response$features$2 === void 0 ? void 0 : _response$features$2.properties.lon;\n        if (lat !== customerCoordinates.latitude || lon !== customerCoordinates.longitude) {\n          setCustomerCoordinates({\n            latitude: lat,\n            longitude: lon\n          });\n        }\n      } catch (error) {\n        console.error(\"Erreur lors de l'appel à l'API de géocodage pour le client : \", error);\n      }\n    }\n  };\n\n  // Function to call the geocoding API for the entrepot\n  const fetchEntrepotCoordinates = async () => {\n    if (entrepot !== null && entrepot !== void 0 && entrepot.address) {\n      try {\n        var _response$features$3, _response$features$4;\n        const response = await getResultFromGeocodingApi(entrepot.address);\n        const stringifiedResponse = JSON.stringify(response);\n        setEntrepotCoordinatesDetails(stringifiedResponse);\n        const lat = (_response$features$3 = response.features[0]) === null || _response$features$3 === void 0 ? void 0 : _response$features$3.properties.lat;\n        const lon = (_response$features$4 = response.features[0]) === null || _response$features$4 === void 0 ? void 0 : _response$features$4.properties.lon;\n        if (lat !== entrepotCoordinates.latitude || lon !== entrepotCoordinates.longitude) {\n          setEntrepotCoordinates({\n            latitude: lat,\n            longitude: lon\n          });\n        }\n      } catch (error) {\n        console.error(\"Erreur lors de l'appel à l'API de géocodage pour l'entrepot : \", error);\n      }\n    }\n  };\n\n  // Function to call the routage API\n  const callRoutingApi = async () => {\n    try {\n      var _response$features$5;\n      // Convertir les objets en tableaux [latitude, longitude]\n      const fromWaypoint = [customerCoordinates.latitude, customerCoordinates.longitude];\n      const toWaypoint = [entrepotCoordinates.latitude, entrepotCoordinates.longitude];\n      console.log(\"fromWayPoint : \" + fromWaypoint);\n      console.log(\"toWayPoint : \" + toWaypoint);\n\n      // Appeler l'API avec ces tableaux\n      const response = await getResultFromRoutingApi(fromWaypoint, toWaypoint);\n      const distance = ((_response$features$5 = response.features[0]) === null || _response$features$5 === void 0 ? void 0 : _response$features$5.properties.distance) / 1000;\n      setDistance(distance);\n      setRouteData(response);\n    } catch (error) {\n      console.error(\"Erreur lors de l'appel à l'API de routage : \", error);\n    }\n  };\n  const calculateCo2Quantity = async () => {\n    //TODO : ajouter table livraison pour pouvoir calculer emissions CO2 (calculer distace avec les attributs de la livraison aussi)\n    //const quantiteCO2 = distance * livraison.transport.kgCo2;\n  };\n\n  // Display\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Choisissez votre mode de livraison : \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 59\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Livraison \\xE0 domicile :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"D\\xE9monstration de tout le processus \\xE9tape par \\xE9tape pour la d\\xE9mo :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Choix du client :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Client ID : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: customerId,\n        onChange: e => setCustomerId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchCustomerData,\n      children: \"R\\xE9cup\\xE9rer donn\\xE9es du client depuis la BD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this), customer && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Nom : \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 28\n          }, this), customer.firstname, \" \", customer.lastname]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Adresse : \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 28\n          }, this), customer.address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchCustomerCoordinates,\n        children: \"R\\xE9cup\\xE9rer coordonn\\xE9es client via l'API Geoapify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }, this), customerCoordinates.latitude && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Latitude : \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 32\n          }, this), customerCoordinates.latitude]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Longitude : \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 32\n          }, this), customerCoordinates.longitude]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleClickCustomer,\n          children: \"Afficher la r\\xE9ponse compl\\xE8te depuis l'API :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 29\n        }, this), completeResponseCustomer && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: customerCoordinatesDetails\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Choix de l'entrepot :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Entrepot ID : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: entrepotId,\n        onChange: e => setEntrepotId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchEntrepotData,\n      children: \"R\\xE9cup\\xE9rer donn\\xE9es de l'entrepot depuis la BD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this), entrepot && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Adresse : \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 28\n          }, this), entrepot.address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchEntrepotCoordinates,\n        children: \"R\\xE9cup\\xE9rer coordonn\\xE9es magasin via l'API Geoapify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 26\n      }, this), entrepotCoordinates.latitude && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Latitude : \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 32\n          }, this), entrepotCoordinates.latitude]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Longitude : \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 32\n          }, this), entrepotCoordinates.longitude]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleClickEntrepot,\n          children: \"Afficher la r\\xE9ponse compl\\xE8te depuis l'API :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 29\n        }, this), completeResponseEntrepot && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: entrepotCoordinatesDetails\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true), customerCoordinates && entrepotCoordinates && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: callRoutingApi,\n        children: \"R\\xE9cup\\xE9rer distance client - entrepot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 21\n      }, this), distance && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Distance : \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 36\n            }, this), distance, /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \" km.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 74\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 29\n        }, this)\n      }, void 0, false)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n_s(DemoLivraison, \"b1Fv3rj7e9IzT5QlmhpgUggjEys=\");\n_c = DemoLivraison;\nvar _c;\n$RefreshReg$(_c, \"DemoLivraison\");","map":{"version":3,"names":["React","useState","getCustomerById","getEntrepotById","getResultFromGeocodingApi","getResultFromRoutingApi","getDeliveryById","getAccountById","getTransportationById","jsxDEV","_jsxDEV","Fragment","_Fragment","DemoLivraison","_s","deliveryId","setDeliveryId","delivery","setDelivery","accountId","setAccountId","customerId","setCustomerId","transportationId","setTransportationId","entrepotId","setEntrepotId","account","setAccount","customer","setCustomer","entrepot","setEntrepot","transportation","setTransportation","distance","setDistance","customerCoordinatesDetails","setCustomerCoordinatesDetails","entrepotCoordinatesDetails","setEntrepotCoordinatesDetails","routeData","setRouteData","customerCoordinates","setCustomerCoordinates","latitude","longitude","entrepotCoordinates","setEntrepotCoordinates","completeResponseCustomer","setCompleteResponseCustomer","completeResponseEntrepot","setCompleteResponseEntrepot","fetchDeliveryData","deliveryData","fetchAccountData","accountData","fetchCustomerData","customerData","fetchEntrepotData","entrepotData","fetchTransportationData","transportationData","fetchCustomerCoordinates","address","_response$features$","_response$features$2","response","stringifiedResponse","JSON","stringify","lat","features","properties","lon","error","console","fetchEntrepotCoordinates","_response$features$3","_response$features$4","callRoutingApi","_response$features$5","fromWaypoint","toWaypoint","log","calculateCo2Quantity","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","firstname","lastname","handleClickCustomer","handleClickEntrepot","_c","$RefreshReg$"],"sources":["/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Livraison.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport {getCustomerById} from \"./Customer\";\nimport {getEntrepotById} from \"./Entrepot\";\nimport {getResultFromGeocodingApi, getResultFromRoutingApi} from \"../api/Geoapify\";\nimport {getDeliveryById} from \"./Delivery\";\nimport {getAccountById} from \"./Account\";\nimport {getTransportationById} from \"./Transportation\";\n\nexport default function DemoLivraison(){\n    //Choose a delivery to calculate its carbon footprint\n    const [deliveryId, setDeliveryId] = useState(\"\");\n    const [delivery, setDelivery] = useState(null);\n\n    //IDs of delivery's foreign keys\n    const [accountId, setAccountId] = useState(\"\");\n    const [customerId, setCustomerId] = useState(\"\");\n    const [transportationId, setTransportationId] = useState(\"\");\n    const [entrepotId, setEntrepotId] = useState(\"\");\n\n    //To fetch those objects' data from delivery\n    const [account, setAccount] = useState(null);\n    const [customer, setCustomer] = useState(null);\n    const [entrepot, setEntrepot] = useState(null);\n    const [transportation, setTransportation] = useState(null);\n\n\n\n\n    const [distance, setDistance] = useState(null);\n    const [customerCoordinatesDetails, setCustomerCoordinatesDetails] = useState(\"\");\n    const [entrepotCoordinatesDetails, setEntrepotCoordinatesDetails] = useState(\"\");\n    const [routeData, setRouteData] = useState(null);\n    const [customerCoordinates, setCustomerCoordinates] = useState({\n        latitude: null,\n        longitude: null\n    });\n    const [entrepotCoordinates, setEntrepotCoordinates] = useState({\n        latitude: null,\n        longitude: null\n    });\n    const [completeResponseCustomer, setCompleteResponseCustomer] = useState(false);\n    const [completeResponseEntrepot, setCompleteResponseEntrepot] = useState(false);\n\n\n    // ===== Fetching objects' data =====\n    // Function to fetch delivery data\n    const fetchDeliveryData = async () => {\n        if (deliveryId) {\n            const deliveryData = await getDeliveryById(deliveryId);\n            setDelivery(deliveryData);\n        }\n    };\n\n    // Function to fetch account data\n    const fetchAccountData = async () => {\n        if (accountId) {\n            const accountData = await getAccountById(accountId);\n            setAccount(accountData);\n        }\n    };\n\n    // Function to fetch customer data\n    const fetchCustomerData = async () => {\n        if (customerId) {\n            const customerData = await getCustomerById(customerId);\n            setCustomer(customerData);\n        }\n    };\n\n    // Function to fetch entrepot data\n    const fetchEntrepotData = async () => {\n        if (entrepotId) {\n            const entrepotData = await getEntrepotById(entrepotId);\n            setEntrepot(entrepotData);\n        }\n    };\n\n    // Function to fetch transportation data\n    const fetchTransportationData = async () => {\n        if (transportationId) {\n            const transportationData = await getTransportationById(transportationId);\n            setTransportation(transportationData);\n        }\n    };\n\n\n    // Function to call the geocoding API for the customer\n    const fetchCustomerCoordinates = async () => {\n        if (customer?.address) {\n            try {\n                const response = await getResultFromGeocodingApi(customer.address);\n                const stringifiedResponse = JSON.stringify(response);\n                setCustomerCoordinatesDetails(stringifiedResponse);\n                const lat = response.features[0]?.properties.lat;\n                const lon = response.features[0]?.properties.lon;\n                if (\n                    lat !== customerCoordinates.latitude ||\n                    lon !== customerCoordinates.longitude\n                ) {\n                    setCustomerCoordinates({ latitude: lat, longitude: lon });\n                }\n            } catch (error) {\n                console.error(\"Erreur lors de l'appel à l'API de géocodage pour le client : \", error);\n            }\n        }\n    };\n\n\n    // Function to call the geocoding API for the entrepot\n    const fetchEntrepotCoordinates = async () => {\n        if (entrepot?.address) {\n            try {\n                const response = await getResultFromGeocodingApi(entrepot.address);\n                const stringifiedResponse = JSON.stringify(response);\n                setEntrepotCoordinatesDetails(stringifiedResponse);\n                const lat = response.features[0]?.properties.lat;\n                const lon = response.features[0]?.properties.lon;\n                if (\n                    lat !== entrepotCoordinates.latitude ||\n                    lon !== entrepotCoordinates.longitude\n                ) {\n                    setEntrepotCoordinates({ latitude: lat, longitude: lon });\n                }\n            } catch (error) {\n                console.error(\"Erreur lors de l'appel à l'API de géocodage pour l'entrepot : \", error);\n            }\n        }\n    };\n\n\n    // Function to call the routage API\n    const callRoutingApi = async () => {\n        try {\n            // Convertir les objets en tableaux [latitude, longitude]\n            const fromWaypoint = [customerCoordinates.latitude, customerCoordinates.longitude];\n            const toWaypoint = [entrepotCoordinates.latitude, entrepotCoordinates.longitude];\n\n            console.log(\"fromWayPoint : \" + fromWaypoint);\n            console.log(\"toWayPoint : \" + toWaypoint);\n\n            // Appeler l'API avec ces tableaux\n            const response = await getResultFromRoutingApi(fromWaypoint, toWaypoint);\n            const distance = response.features[0]?.properties.distance / 1000;\n            setDistance(distance);\n            setRouteData(response);\n        } catch (error) {\n            console.error(\"Erreur lors de l'appel à l'API de routage : \", error);\n        }\n    };\n\n\n    const calculateCo2Quantity = async () => {\n        //TODO : ajouter table livraison pour pouvoir calculer emissions CO2 (calculer distace avec les attributs de la livraison aussi)\n        //const quantiteCO2 = distance * livraison.transport.kgCo2;\n    };\n\n\n    // Display\n    return (\n        <div className=\"container\">\n            <h2>Choisissez votre mode de livraison : </h2><br/>\n            <h4>Livraison à domicile :</h4>\n            <p>Démonstration de tout le processus étape par étape pour la démo :</p>\n            <h5>Choix du client :</h5>\n            <div>\n                <label>Client ID : </label>\n                <input\n                    type=\"number\"\n                    value={customerId}\n                    onChange={(e) => setCustomerId(e.target.value)}\n                />\n            </div>\n            <br/>\n            <button onClick={fetchCustomerData}>Récupérer données du client depuis la BD</button>\n            <br/>\n\n            {customer && (\n                <>\n                    <div>\n                        <br/>\n                        <p><strong>Nom : </strong>{customer.firstname} {customer.lastname}</p>\n                        <p><strong>Adresse : </strong>{customer.address}</p>\n                    </div>\n\n                    <button onClick={fetchCustomerCoordinates}>\n                        Récupérer coordonnées client via l'API Geoapify\n                    </button>\n                    {customerCoordinates.latitude && (\n                        <div>\n                            <br/>\n                            <p><strong>Latitude : </strong>{customerCoordinates.latitude}</p>\n                            <p><strong>Longitude : </strong>{customerCoordinates.longitude}</p>\n                            <br/>\n                            <button onClick={handleClickCustomer}>Afficher la réponse complète depuis l'API :</button>\n                            <br/>\n                            {completeResponseCustomer && (\n                                <p>{customerCoordinatesDetails}</p>\n                            )}\n                        </div>\n                    )}\n                </>\n            )}\n\n            <br/>\n            <br/>\n            <br/>\n\n            <h5>Choix de l'entrepot :</h5>\n            <div>\n                <label>Entrepot ID : </label>\n                <input\n                    type=\"number\"\n                    value={entrepotId}\n                    onChange={(e) => setEntrepotId(e.target.value)}\n                />\n            </div>\n            <br/>\n            <button onClick={fetchEntrepotData}>Récupérer données de l'entrepot depuis la BD</button>\n            {entrepot && (\n                <>\n                    <div>\n                        <br/>\n                        <p><strong>Adresse : </strong>{entrepot.address}</p>\n                    </div>\n                    <button onClick={fetchEntrepotCoordinates}>\n                        Récupérer coordonnées magasin via l'API Geoapify\n                    </button>\n                    <br/><br/>\n                    {entrepotCoordinates.latitude && (\n                        <div>\n                            <p><strong>Latitude : </strong>{entrepotCoordinates.latitude}</p>\n                            <p><strong>Longitude : </strong>{entrepotCoordinates.longitude}</p>\n                            <button onClick={handleClickEntrepot}>Afficher la réponse complète depuis l'API :</button>\n                            <br/>\n                            {completeResponseEntrepot && (\n                                <p>{entrepotCoordinatesDetails}</p>\n                            )}\n                        </div>\n                    )}\n                </>\n            )}\n            {customerCoordinates && entrepotCoordinates && (\n                <>\n                    <br/>\n                    <br/>\n                    <button onClick={callRoutingApi}>\n                        Récupérer distance client - entrepot\n                    </button>\n                    {distance && (\n                        <>\n                            <div>\n                                <p><strong>Distance : </strong>{distance}<strong> km.</strong></p>\n                            </div>\n\n                        </>\n                    )}\n                </>\n            )}\n        </div>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}