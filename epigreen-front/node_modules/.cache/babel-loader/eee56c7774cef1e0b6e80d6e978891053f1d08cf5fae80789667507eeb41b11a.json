{"ast":null,"code":"var _jsxFileName = \"/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Livraison.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { getCustomerById } from \"./Customer\";\nimport { getEntrepotById } from \"./Entrepot\";\nimport { getResultFromGeocodingApi, getResultFromRoutingApi } from \"../api/Geoapify\";\nimport { getDeliveryById } from \"./Delivery\";\nimport { getAccountById } from \"./Account\";\nimport { getTransportationById } from \"./Transportation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function DemoLivraison() {\n  _s();\n  //Choose a delivery to calculate its carbon footprint\n  const [deliveryId, setDeliveryId] = useState(\"\");\n  const [delivery, setDelivery] = useState(null);\n\n  //To fetch those objects' data from delivery\n  const [account, setAccount] = useState(null);\n  const [customer, setCustomer] = useState(null);\n  const [entrepot, setEntrepot] = useState(null);\n  const [transportation, setTransportation] = useState(null);\n  const [distance, setDistance] = useState(null);\n  const [customerCoordinatesDetails, setCustomerCoordinatesDetails] = useState(\"\");\n  const [entrepotCoordinatesDetails, setEntrepotCoordinatesDetails] = useState(\"\");\n  const [routeData, setRouteData] = useState(null);\n  const [customerCoordinates, setCustomerCoordinates] = useState({\n    latitude: null,\n    longitude: null\n  });\n  const [entrepotCoordinates, setEntrepotCoordinates] = useState({\n    latitude: null,\n    longitude: null\n  });\n  const [completeResponseCustomer, setCompleteResponseCustomer] = useState(false);\n  const [completeResponseEntrepot, setCompleteResponseEntrepot] = useState(false);\n\n  // ===== Fetching objects' data  from delivery =====\n  // Function to fetch delivery data\n  const fetchDeliveryData = async () => {\n    try {\n      const deliveryData = await getDeliveryById(deliveryId);\n      setDelivery(deliveryData);\n      if (delivery) {\n        setAccount(delivery.account);\n        setCustomer(delivery.account.customer);\n        setEntrepot(delivery.entrepot);\n        setTransportation(delivery.transportation);\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération des données de livraison : \", error);\n    }\n  };\n  // ===================================================\n\n  // Function to call the geocoding API for the customer\n  const fetchCustomerCoordinates = async () => {\n    if (customer !== null && customer !== void 0 && customer.address) {\n      try {\n        var _response$features$, _response$features$2;\n        const response = await getResultFromGeocodingApi(customer.address);\n        const stringifiedResponse = JSON.stringify(response);\n        setCustomerCoordinatesDetails(stringifiedResponse);\n        const lat = (_response$features$ = response.features[0]) === null || _response$features$ === void 0 ? void 0 : _response$features$.properties.lat;\n        const lon = (_response$features$2 = response.features[0]) === null || _response$features$2 === void 0 ? void 0 : _response$features$2.properties.lon;\n        if (lat !== customerCoordinates.latitude || lon !== customerCoordinates.longitude) {\n          setCustomerCoordinates({\n            latitude: lat,\n            longitude: lon\n          });\n        }\n      } catch (error) {\n        console.error(\"Erreur lors de l'appel à l'API de géocodage pour le client : \", error);\n      }\n    }\n  };\n\n  // Function to call the geocoding API for the entrepot\n  const fetchEntrepotCoordinates = async () => {\n    if (entrepot !== null && entrepot !== void 0 && entrepot.address) {\n      try {\n        var _response$features$3, _response$features$4;\n        const response = await getResultFromGeocodingApi(entrepot.address);\n        const stringifiedResponse = JSON.stringify(response);\n        setEntrepotCoordinatesDetails(stringifiedResponse);\n        const lat = (_response$features$3 = response.features[0]) === null || _response$features$3 === void 0 ? void 0 : _response$features$3.properties.lat;\n        const lon = (_response$features$4 = response.features[0]) === null || _response$features$4 === void 0 ? void 0 : _response$features$4.properties.lon;\n        if (lat !== entrepotCoordinates.latitude || lon !== entrepotCoordinates.longitude) {\n          setEntrepotCoordinates({\n            latitude: lat,\n            longitude: lon\n          });\n        }\n      } catch (error) {\n        console.error(\"Erreur lors de l'appel à l'API de géocodage pour l'entrepot : \", error);\n      }\n    }\n  };\n\n  // Function to call the routage API\n  const callRoutingApi = async () => {\n    try {\n      var _response$features$5;\n      // Convertir les objets en tableaux [latitude, longitude]\n      const fromWaypoint = [customerCoordinates.latitude, customerCoordinates.longitude];\n      const toWaypoint = [entrepotCoordinates.latitude, entrepotCoordinates.longitude];\n      console.log(\"fromWayPoint : \" + fromWaypoint);\n      console.log(\"toWayPoint : \" + toWaypoint);\n\n      // Appeler l'API avec ces tableaux\n      const response = await getResultFromRoutingApi(fromWaypoint, toWaypoint);\n      const distance = ((_response$features$5 = response.features[0]) === null || _response$features$5 === void 0 ? void 0 : _response$features$5.properties.distance) / 1000;\n      setDistance(distance);\n      setRouteData(response);\n    } catch (error) {\n      console.error(\"Erreur lors de l'appel à l'API de routage : \", error);\n    }\n  };\n  const calculateCo2Quantity = async () => {\n    //TODO : ajouter table livraison pour pouvoir calculer emissions CO2 (calculer distace avec les attributs de la livraison aussi)\n    //const quantiteCO2 = distance * livraison.transport.kgCo2;\n  };\n\n  // Display\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Choisissez votre mode de livraison : \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 59\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Livraison \\xE0 domicile :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Choix du num\\xE9ro de livraison :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Livraison ID : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: deliveryId,\n        onChange: e => setDeliveryId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchDeliveryData,\n      children: \"R\\xE9cup\\xE9rer donn\\xE9es de la livraison depuis la BD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), customer && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Nom : \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 28\n          }, this), customer.firstname, \" \", customer.lastname]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Adresse : \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 28\n          }, this), customer.address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchCustomerCoordinates,\n        children: \"R\\xE9cup\\xE9rer coordonn\\xE9es client via l'API Geoapify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }, this), customerCoordinates.latitude && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Latitude : \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 32\n          }, this), customerCoordinates.latitude]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Longitude : \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 32\n          }, this), customerCoordinates.longitude]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 9\n  }, this);\n}\n_s(DemoLivraison, \"hXDA3e7ZN48fGy5J+SUoEgENAt8=\");\n_c = DemoLivraison;\nvar _c;\n$RefreshReg$(_c, \"DemoLivraison\");","map":{"version":3,"names":["React","useState","getCustomerById","getEntrepotById","getResultFromGeocodingApi","getResultFromRoutingApi","getDeliveryById","getAccountById","getTransportationById","jsxDEV","_jsxDEV","Fragment","_Fragment","DemoLivraison","_s","deliveryId","setDeliveryId","delivery","setDelivery","account","setAccount","customer","setCustomer","entrepot","setEntrepot","transportation","setTransportation","distance","setDistance","customerCoordinatesDetails","setCustomerCoordinatesDetails","entrepotCoordinatesDetails","setEntrepotCoordinatesDetails","routeData","setRouteData","customerCoordinates","setCustomerCoordinates","latitude","longitude","entrepotCoordinates","setEntrepotCoordinates","completeResponseCustomer","setCompleteResponseCustomer","completeResponseEntrepot","setCompleteResponseEntrepot","fetchDeliveryData","deliveryData","error","console","fetchCustomerCoordinates","address","_response$features$","_response$features$2","response","stringifiedResponse","JSON","stringify","lat","features","properties","lon","fetchEntrepotCoordinates","_response$features$3","_response$features$4","callRoutingApi","_response$features$5","fromWaypoint","toWaypoint","log","calculateCo2Quantity","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","firstname","lastname","_c","$RefreshReg$"],"sources":["/Users/nawel/Documents/GitHub/EpiGreen-Ing2/proto-front/src/components/Livraison.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport {getCustomerById} from \"./Customer\";\nimport {getEntrepotById} from \"./Entrepot\";\nimport {getResultFromGeocodingApi, getResultFromRoutingApi} from \"../api/Geoapify\";\nimport {getDeliveryById} from \"./Delivery\";\nimport {getAccountById} from \"./Account\";\nimport {getTransportationById} from \"./Transportation\";\n\nexport default function DemoLivraison(){\n    //Choose a delivery to calculate its carbon footprint\n    const [deliveryId, setDeliveryId] = useState(\"\");\n    const [delivery, setDelivery] = useState(null);\n\n    //To fetch those objects' data from delivery\n    const [account, setAccount] = useState(null);\n    const [customer, setCustomer] = useState(null);\n    const [entrepot, setEntrepot] = useState(null);\n    const [transportation, setTransportation] = useState(null);\n\n\n\n\n    const [distance, setDistance] = useState(null);\n    const [customerCoordinatesDetails, setCustomerCoordinatesDetails] = useState(\"\");\n    const [entrepotCoordinatesDetails, setEntrepotCoordinatesDetails] = useState(\"\");\n    const [routeData, setRouteData] = useState(null);\n    const [customerCoordinates, setCustomerCoordinates] = useState({\n        latitude: null,\n        longitude: null\n    });\n    const [entrepotCoordinates, setEntrepotCoordinates] = useState({\n        latitude: null,\n        longitude: null\n    });\n    const [completeResponseCustomer, setCompleteResponseCustomer] = useState(false);\n    const [completeResponseEntrepot, setCompleteResponseEntrepot] = useState(false);\n\n\n\n    // ===== Fetching objects' data  from delivery =====\n    // Function to fetch delivery data\n    const fetchDeliveryData = async () => {\n        try{\n            const deliveryData = await getDeliveryById(deliveryId);\n            setDelivery(deliveryData);\n\n        if (delivery) {\n            setAccount(delivery.account);\n            setCustomer(delivery.account.customer);\n            setEntrepot(delivery.entrepot);\n            setTransportation(delivery.transportation);\n        }\n\n        } catch (error) {\n            console.error(\"Erreur lors de la récupération des données de livraison : \", error);\n        }\n    };\n    // ===================================================\n\n\n    // Function to call the geocoding API for the customer\n    const fetchCustomerCoordinates = async () => {\n        if (customer?.address) {\n            try {\n                const response = await getResultFromGeocodingApi(customer.address);\n                const stringifiedResponse = JSON.stringify(response);\n                setCustomerCoordinatesDetails(stringifiedResponse);\n                const lat = response.features[0]?.properties.lat;\n                const lon = response.features[0]?.properties.lon;\n                if (\n                    lat !== customerCoordinates.latitude ||\n                    lon !== customerCoordinates.longitude\n                ) {\n                    setCustomerCoordinates({ latitude: lat, longitude: lon });\n                }\n            } catch (error) {\n                console.error(\"Erreur lors de l'appel à l'API de géocodage pour le client : \", error);\n            }\n        }\n    };\n\n\n    // Function to call the geocoding API for the entrepot\n    const fetchEntrepotCoordinates = async () => {\n        if (entrepot?.address) {\n            try {\n                const response = await getResultFromGeocodingApi(entrepot.address);\n                const stringifiedResponse = JSON.stringify(response);\n                setEntrepotCoordinatesDetails(stringifiedResponse);\n                const lat = response.features[0]?.properties.lat;\n                const lon = response.features[0]?.properties.lon;\n                if (\n                    lat !== entrepotCoordinates.latitude ||\n                    lon !== entrepotCoordinates.longitude\n                ) {\n                    setEntrepotCoordinates({ latitude: lat, longitude: lon });\n                }\n            } catch (error) {\n                console.error(\"Erreur lors de l'appel à l'API de géocodage pour l'entrepot : \", error);\n            }\n        }\n    };\n\n\n    // Function to call the routage API\n    const callRoutingApi = async () => {\n        try {\n            // Convertir les objets en tableaux [latitude, longitude]\n            const fromWaypoint = [customerCoordinates.latitude, customerCoordinates.longitude];\n            const toWaypoint = [entrepotCoordinates.latitude, entrepotCoordinates.longitude];\n\n            console.log(\"fromWayPoint : \" + fromWaypoint);\n            console.log(\"toWayPoint : \" + toWaypoint);\n\n            // Appeler l'API avec ces tableaux\n            const response = await getResultFromRoutingApi(fromWaypoint, toWaypoint);\n            const distance = response.features[0]?.properties.distance / 1000;\n            setDistance(distance);\n            setRouteData(response);\n        } catch (error) {\n            console.error(\"Erreur lors de l'appel à l'API de routage : \", error);\n        }\n    };\n\n\n    const calculateCo2Quantity = async () => {\n        //TODO : ajouter table livraison pour pouvoir calculer emissions CO2 (calculer distace avec les attributs de la livraison aussi)\n        //const quantiteCO2 = distance * livraison.transport.kgCo2;\n    };\n\n\n    // Display\n    return (\n        <div className=\"container\">\n            <h2>Choisissez votre mode de livraison : </h2><br/>\n            <h4>Livraison à domicile :</h4>\n            <h5>Choix du numéro de livraison :</h5>\n            <div>\n                <label>Livraison ID : </label>\n                <input\n                    type=\"number\"\n                    value={deliveryId}\n                    onChange={(e) => setDeliveryId(e.target.value)}\n                />\n            </div>\n            <br/>\n            <button onClick={fetchDeliveryData}>Récupérer données de la livraison depuis la BD</button>\n            <br/>\n\n            {customer && (\n                <>\n                    <div>\n                        <br/>\n                        <p><strong>Nom : </strong>{customer.firstname} {customer.lastname}</p>\n                        <p><strong>Adresse : </strong>{customer.address}</p>\n                    </div>\n\n                    <button onClick={fetchCustomerCoordinates}>\n                        Récupérer coordonnées client via l'API Geoapify\n                    </button>\n                    {customerCoordinates.latitude && (\n                        <div>\n                            <br/>\n                            <p><strong>Latitude : </strong>{customerCoordinates.latitude}</p>\n                            <p><strong>Longitude : </strong>{customerCoordinates.longitude}</p>\n                            <br/>\n                        </div>\n                    )}\n                </>\n            )}\n            <br/>\n        </div>\n    );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,SAAQC,eAAe,QAAO,YAAY;AAC1C,SAAQC,eAAe,QAAO,YAAY;AAC1C,SAAQC,yBAAyB,EAAEC,uBAAuB,QAAO,iBAAiB;AAClF,SAAQC,eAAe,QAAO,YAAY;AAC1C,SAAQC,cAAc,QAAO,WAAW;AACxC,SAAQC,qBAAqB,QAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEvD,eAAe,SAASC,aAAaA,CAAA,EAAE;EAAAC,EAAA;EACnC;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACA,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACoB,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACsB,QAAQ,EAAEC,WAAW,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACwB,cAAc,EAAEC,iBAAiB,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAK1D,MAAM,CAAC0B,QAAQ,EAAEC,WAAW,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAAC4B,0BAA0B,EAAEC,6BAA6B,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EAChF,MAAM,CAAC8B,0BAA0B,EAAEC,6BAA6B,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EAChF,MAAM,CAACgC,SAAS,EAAEC,YAAY,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACkC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGnC,QAAQ,CAAC;IAC3DoC,QAAQ,EAAE,IAAI;IACdC,SAAS,EAAE;EACf,CAAC,CAAC;EACF,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGvC,QAAQ,CAAC;IAC3DoC,QAAQ,EAAE,IAAI;IACdC,SAAS,EAAE;EACf,CAAC,CAAC;EACF,MAAM,CAACG,wBAAwB,EAAEC,2BAA2B,CAAC,GAAGzC,QAAQ,CAAC,KAAK,CAAC;EAC/E,MAAM,CAAC0C,wBAAwB,EAAEC,2BAA2B,CAAC,GAAG3C,QAAQ,CAAC,KAAK,CAAC;;EAI/E;EACA;EACA,MAAM4C,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAG;MACC,MAAMC,YAAY,GAAG,MAAMxC,eAAe,CAACS,UAAU,CAAC;MACtDG,WAAW,CAAC4B,YAAY,CAAC;MAE7B,IAAI7B,QAAQ,EAAE;QACVG,UAAU,CAACH,QAAQ,CAACE,OAAO,CAAC;QAC5BG,WAAW,CAACL,QAAQ,CAACE,OAAO,CAACE,QAAQ,CAAC;QACtCG,WAAW,CAACP,QAAQ,CAACM,QAAQ,CAAC;QAC9BG,iBAAiB,CAACT,QAAQ,CAACQ,cAAc,CAAC;MAC9C;IAEA,CAAC,CAAC,OAAOsB,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,4DAA4D,EAAEA,KAAK,CAAC;IACtF;EACJ,CAAC;EACD;;EAGA;EACA,MAAME,wBAAwB,GAAG,MAAAA,CAAA,KAAY;IACzC,IAAI5B,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAE6B,OAAO,EAAE;MACnB,IAAI;QAAA,IAAAC,mBAAA,EAAAC,oBAAA;QACA,MAAMC,QAAQ,GAAG,MAAMjD,yBAAyB,CAACiB,QAAQ,CAAC6B,OAAO,CAAC;QAClE,MAAMI,mBAAmB,GAAGC,IAAI,CAACC,SAAS,CAACH,QAAQ,CAAC;QACpDvB,6BAA6B,CAACwB,mBAAmB,CAAC;QAClD,MAAMG,GAAG,IAAAN,mBAAA,GAAGE,QAAQ,CAACK,QAAQ,CAAC,CAAC,CAAC,cAAAP,mBAAA,uBAApBA,mBAAA,CAAsBQ,UAAU,CAACF,GAAG;QAChD,MAAMG,GAAG,IAAAR,oBAAA,GAAGC,QAAQ,CAACK,QAAQ,CAAC,CAAC,CAAC,cAAAN,oBAAA,uBAApBA,oBAAA,CAAsBO,UAAU,CAACC,GAAG;QAChD,IACIH,GAAG,KAAKtB,mBAAmB,CAACE,QAAQ,IACpCuB,GAAG,KAAKzB,mBAAmB,CAACG,SAAS,EACvC;UACEF,sBAAsB,CAAC;YAAEC,QAAQ,EAAEoB,GAAG;YAAEnB,SAAS,EAAEsB;UAAI,CAAC,CAAC;QAC7D;MACJ,CAAC,CAAC,OAAOb,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,+DAA+D,EAAEA,KAAK,CAAC;MACzF;IACJ;EACJ,CAAC;;EAGD;EACA,MAAMc,wBAAwB,GAAG,MAAAA,CAAA,KAAY;IACzC,IAAItC,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAE2B,OAAO,EAAE;MACnB,IAAI;QAAA,IAAAY,oBAAA,EAAAC,oBAAA;QACA,MAAMV,QAAQ,GAAG,MAAMjD,yBAAyB,CAACmB,QAAQ,CAAC2B,OAAO,CAAC;QAClE,MAAMI,mBAAmB,GAAGC,IAAI,CAACC,SAAS,CAACH,QAAQ,CAAC;QACpDrB,6BAA6B,CAACsB,mBAAmB,CAAC;QAClD,MAAMG,GAAG,IAAAK,oBAAA,GAAGT,QAAQ,CAACK,QAAQ,CAAC,CAAC,CAAC,cAAAI,oBAAA,uBAApBA,oBAAA,CAAsBH,UAAU,CAACF,GAAG;QAChD,MAAMG,GAAG,IAAAG,oBAAA,GAAGV,QAAQ,CAACK,QAAQ,CAAC,CAAC,CAAC,cAAAK,oBAAA,uBAApBA,oBAAA,CAAsBJ,UAAU,CAACC,GAAG;QAChD,IACIH,GAAG,KAAKlB,mBAAmB,CAACF,QAAQ,IACpCuB,GAAG,KAAKrB,mBAAmB,CAACD,SAAS,EACvC;UACEE,sBAAsB,CAAC;YAAEH,QAAQ,EAAEoB,GAAG;YAAEnB,SAAS,EAAEsB;UAAI,CAAC,CAAC;QAC7D;MACJ,CAAC,CAAC,OAAOb,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,gEAAgE,EAAEA,KAAK,CAAC;MAC1F;IACJ;EACJ,CAAC;;EAGD;EACA,MAAMiB,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MAAA,IAAAC,oBAAA;MACA;MACA,MAAMC,YAAY,GAAG,CAAC/B,mBAAmB,CAACE,QAAQ,EAAEF,mBAAmB,CAACG,SAAS,CAAC;MAClF,MAAM6B,UAAU,GAAG,CAAC5B,mBAAmB,CAACF,QAAQ,EAAEE,mBAAmB,CAACD,SAAS,CAAC;MAEhFU,OAAO,CAACoB,GAAG,CAAC,iBAAiB,GAAGF,YAAY,CAAC;MAC7ClB,OAAO,CAACoB,GAAG,CAAC,eAAe,GAAGD,UAAU,CAAC;;MAEzC;MACA,MAAMd,QAAQ,GAAG,MAAMhD,uBAAuB,CAAC6D,YAAY,EAAEC,UAAU,CAAC;MACxE,MAAMxC,QAAQ,GAAG,EAAAsC,oBAAA,GAAAZ,QAAQ,CAACK,QAAQ,CAAC,CAAC,CAAC,cAAAO,oBAAA,uBAApBA,oBAAA,CAAsBN,UAAU,CAAChC,QAAQ,IAAG,IAAI;MACjEC,WAAW,CAACD,QAAQ,CAAC;MACrBO,YAAY,CAACmB,QAAQ,CAAC;IAC1B,CAAC,CAAC,OAAON,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;IACxE;EACJ,CAAC;EAGD,MAAMsB,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACrC;IACA;EAAA,CACH;;EAGD;EACA,oBACI3D,OAAA;IAAK4D,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACtB7D,OAAA;MAAA6D,QAAA,EAAI;IAAqC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAAAjE,OAAA;MAAA8D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnDjE,OAAA;MAAA6D,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/BjE,OAAA;MAAA6D,QAAA,EAAI;IAA8B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvCjE,OAAA;MAAA6D,QAAA,gBACI7D,OAAA;QAAA6D,QAAA,EAAO;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC9BjE,OAAA;QACIkE,IAAI,EAAC,QAAQ;QACbC,KAAK,EAAE9D,UAAW;QAClB+D,QAAQ,EAAGC,CAAC,IAAK/D,aAAa,CAAC+D,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNjE,OAAA;MAAA8D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLjE,OAAA;MAAQuE,OAAO,EAAEpC,iBAAkB;MAAA0B,QAAA,EAAC;IAA8C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC3FjE,OAAA;MAAA8D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAEJtD,QAAQ,iBACLX,OAAA,CAAAE,SAAA;MAAA2D,QAAA,gBACI7D,OAAA;QAAA6D,QAAA,gBACI7D,OAAA;UAAA8D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACLjE,OAAA;UAAA6D,QAAA,gBAAG7D,OAAA;YAAA6D,QAAA,EAAQ;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAACtD,QAAQ,CAAC6D,SAAS,EAAC,GAAC,EAAC7D,QAAQ,CAAC8D,QAAQ;QAAA;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtEjE,OAAA;UAAA6D,QAAA,gBAAG7D,OAAA;YAAA6D,QAAA,EAAQ;UAAU;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAACtD,QAAQ,CAAC6B,OAAO;QAAA;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD,CAAC,eAENjE,OAAA;QAAQuE,OAAO,EAAEhC,wBAAyB;QAAAsB,QAAA,EAAC;MAE3C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACRxC,mBAAmB,CAACE,QAAQ,iBACzB3B,OAAA;QAAA6D,QAAA,gBACI7D,OAAA;UAAA8D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACLjE,OAAA;UAAA6D,QAAA,gBAAG7D,OAAA;YAAA6D,QAAA,EAAQ;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAACxC,mBAAmB,CAACE,QAAQ;QAAA;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjEjE,OAAA;UAAA6D,QAAA,gBAAG7D,OAAA;YAAA6D,QAAA,EAAQ;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAACxC,mBAAmB,CAACG,SAAS;QAAA;UAAAkC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnEjE,OAAA;UAAA8D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CACR;IAAA,eACH,CACL,eACDjE,OAAA;MAAA8D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd;AAAC7D,EAAA,CArKuBD,aAAa;AAAAuE,EAAA,GAAbvE,aAAa;AAAA,IAAAuE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}